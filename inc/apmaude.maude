*** set clear rules off .
mod SAMPLER is
  
  pr RANDOM .
  pr CONVERSION .
  --- pr COUNTER .
  
  var n : Nat .
  vars P R Min Max : Float .
  var userCounter : Nat .

  op rand : Nat -> [Float] .
  eq rand(userCounter) 
   = float(random(userCounter) / 4294967295) . 

  op rrand : Nat -> [Rat] .
  eq rrand(userCounter) 
   = random(userCounter) / 4294967295 . 
  
  op sampleBernoulli : Nat Float -> [Bool] .
  eq sampleBernoulli(userCounter,P) 
   = rand(userCounter) < P .
   
  op sampleUniversalWithMax : Nat Nat -> Nat .       
  --- eq sampleUniversalWithMax(userCounter,n) = floor(rrand(userCounter) * n) .
  eq sampleUniversalWithMax(userCounter,n) 
   = random(userCounter) rem s(n) .
  
  
  
  op sampleExpWithMean : Nat Float -> Float .
  eq sampleExpWithMean(userCounter,R) 
   = R * (- log(rand(userCounter))) .
  
  op sampleExpWithRate : Nat Float -> Float .
  eq sampleExpWithRate(userCounter,R) 
   = (- log(rand(userCounter))) / R .
  
  op genRandom : Nat Float Float -> [Float] .
  eq genRandom(userCounter, Min, Max) 
   = rand(userCounter) * (Max - Min) + Min .
  
endm


---
--- Just for pretty printing the configurations 
--- plus some optimisations (idempotency of attributes, etc.)
---
mod PRETTY-CONFIGURATION is

  pr FLOAT .
  pr CONFIGURATION  * ( sort Configuration to Config , op __ to _;;_  , op <_:_|_>  to <<_::_||_>> ) .

  
  op __ : Config Config -> Config [ ctor config assoc comm id: none ] . --- [ ctor config assoc comm id: none format(d d d) ] .
  op <_:_|_> : Oid Cid AttributeSet -> Object [ ctor object ] . 

  vars att1 : Attribute .
  vars msg1 : Msg .
  

  --- Idempotency of attributes and messages
  --- eq att1 , att1 = att1 .
  --- eq msg1 msg1 = msg1 .
    
  op flg : Bool Float -> Config . --- a flag delimiting execution rounds (?)
  
endm


mod APMAUDE is
  
  pr FLOAT .
  pr NAT .
  pr PRETTY-CONFIGURATION .
  --- pr COUNTER .
---  pr SAMPLER .

  sort Content .
  ops timeoutAPExpired timeoutASExpired : -> Content .
  op generateNextEffect : -> Content [ ctor ] .
  --- op generateNextEffectAfterPostponement : -> Content [ ctor ] .
  op execute : Oid Msg -> Content [ ctor ] .
  
  --- Messages
  op emptyContent : -> Content [ ctor ] .
  op _<-_ : Oid Content -> Msg .

  --- Scheduler
  sorts Scheduler ScheduleElem ScheduleList .
  subsort ScheduleElem < ScheduleList .
  subsort Scheduler < Config .
  
  var t1 t2 t gt : Float .
  vars C C2 conf : Config .
  var O O1 : Object .
  var p i m n : Nat .
  var SL SL' : ScheduleList .
  var e : ScheduleElem .
  var M1 M2 : Msg .

  op  nilSL : -> ScheduleList [ ctor ] .
  --- op  _;_ : ScheduleList ScheduleList -> ScheduleList [assoc comm id: nilSL] .
  op  _;_ : ScheduleList ScheduleList -> ScheduleList [assoc id: nilSL] .

  op [_,_,_] : Float Msg Nat -> ScheduleElem [ ctor ] .  --- [t, m, p]: t -> time, m -> message, p -> drop?
  op [_,_] : Float Msg -> ScheduleElem .
  
  op {_|_} : Float ScheduleList -> Scheduler .
  op insert : Scheduler ScheduleElem -> Scheduler .
  op insert : ScheduleList ScheduleElem -> ScheduleList .
  op insertList : Scheduler ScheduleList -> Scheduler .
  op insertList : ScheduleList ScheduleList -> ScheduleList .
  
  op tick : Config -> Config .
  eq tick( sc conf ) = mytick(sc) conf .
  eq tick( {sc conf} ) = {mytick(sc) conf} .
  
  op mytick : Scheduler -> Config .
  eq mytick({ gt | [ t1 , M1 , p] ; SL }) = M1 { t1 | SL } .
  eq mytick({ gt | nilSL }) = { gt | nilSL } .
  
  op global-time : Scheduler -> Float .
  op getTime : Config -> Float .
	
  eq [ t1 , M1 ] = [ t1 , M1 , 0] .
  eq global-time({ gt | SL }) = gt .
  eq getTime(C {gt | SL}) = gt .  

  eq insert({ gt | SL },e) = { gt | insert(SL,e) } .
  eq insert(SL , [ t2 , M2 , 1]) = SL .   
  eq insert([ t1 , M1 , p] ; SL , [ t2 , M2 , 0]) = 
       if t1 < t2 
        then [ t1 , M1 , p] ; insert(SL, [ t2 , M2 , 0]) 
        else ([ t2 , M2 , 0] ; [ t1 , M1 , p] ; SL) 
       fi .
  eq insert( nilSL , [ t2 , M2 , 0]) = [ t2 , M2 , 0] .

  eq insertList({ gt | SL }, SL') = { gt | insertList(SL, SL') } .
  eq insertList(SL , [t2 , M2, p] ; SL') = insertList( insert(SL, [t2, M2, p]), SL' ) .
  eq insertList( SL , nilSL ) = SL .

  
  op { _ } : Config -> Config [ ctor ] .
  op init : -> Config .
  
  var sc : Scheduler .
  op initState : -> Config .
  eq initState = closeWorldExceptScheduler(init) [ owise ] .
  op closeWorldExceptScheduler : Config -> Config .
  eq closeWorldExceptScheduler(sc C) = sc { C } .
  
  
  --- counter for random number generation
  op randomCounter : Nat -> Object [ ctor ] .
  op stepsCounter : Nat -> Object [ ctor ] .
  op randomAndStepsCounter : Nat Nat -> Object [ ctor ] .
  *** op updateBuiltinCounter : Nat -> Msg [ ctor ] .
  *** eq builtinCounter(m    ) updateBuiltinCounter(n) 
   *** = builtinCounter(m + n) .
  
  *** op notContainCounterUpdates : Config -> Bool .
  *** eq notContainCounterUpdates(updateBuiltinCounter(n) C) = false .
  *** eq notContainCounterUpdates(                        C) = true [ owise ] .  
  
  op sat : Nat Config -> Bool .
  op val : Nat Config -> Float .
  
  --- op ticksCounter : Nat -> Msg [ ctor ] .
  --- op NUMBEROFSTEPS : -> Nat .
  
  
  
  
  
  var when : Float . var event : Msg .
  ---sort EventToBeScheduled .
  op eventToBeScheduled : Float Msg -> Object .
  eq scheduledEvents(SL) eventToBeScheduled(when,event) = scheduledEvents(insert(SL,[ when, event,0 ])) .
  op globalTime : Float -> Object .
  op scheduledEvents : ScheduleList -> Object .
  *** eq tick( globalTime(gt) scheduledEvents([ t1 , M1 , p] ; SL) conf ) = M1 globalTime(t1) scheduledEvents(SL) conf .
  *** eq tick( globalTime(gt) scheduledEvents(SL) conf ) = globalTime(gt) scheduledEvents(SL) conf [owise] .
  eq tick( globalTime(gt) scheduledEvents(SL) conf ) = mytick(globalTime(gt) scheduledEvents(SL)) conf .
  op mytick : Config -> Config .
  eq mytick(globalTime(gt) scheduledEvents([ t1 , M1 , p] ; SL )) = M1 globalTime(t1) scheduledEvents(SL) .
  eq mytick(globalTime(gt) scheduledEvents(nilSL)) = globalTime(gt) scheduledEvents(nilSL) .
  
endm	


	
--- Hide part of the terms 
*** set print conceal on .
*** print conceal mod_is_sorts_._____endm .
*** print conceal rules .  
